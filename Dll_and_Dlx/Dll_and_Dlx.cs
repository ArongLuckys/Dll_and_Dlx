//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\Users\QT-254\Desktop\Dll_and_Dlx.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: QT-254
//              Version: NX 10
//              Date: 04-09-2024  (Format: mm-dd-yyyy)
//              Time: 15:43 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using System.IO;
using NXOpen;
using NXOpen.BlockStyler;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Reflection;
using NXOpen.Features;

//------------------------------------------------------------------------------
//Represents Block Styler application class
//------------------------------------------------------------------------------
public class Dll_and_Dlx
{
	//class members
	private static Session theSession = null;
	private static UI theUI = null;
	private string theDlxFileName;
	private NXOpen.BlockStyler.BlockDialog theDialog;
	private NXOpen.BlockStyler.Group group0;// Block type: Group
	private NXOpen.BlockStyler.Button button0;// Block type: Button
	private NXOpen.BlockStyler.Button button01;// Block type: Button
	private NXOpen.BlockStyler.Button button02;// Block type: Button

	//------------------------------------------------------------------------------
	//Constructor for NX Styler class
	//------------------------------------------------------------------------------

	/// <summary>
	/// 释放内嵌资源至指定位置
	/// </summary>
	/// <param name="resource">嵌入的资源，此参数写作：命名空间.文件夹名.文件名.扩展名</param>
	/// <param name="path">释放到位置</param>
	private void ExtractFile(String resource, String path)
	{
		Assembly assembly = Assembly.GetExecutingAssembly();
		BufferedStream input = new BufferedStream(assembly.GetManifestResourceStream(resource));
		FileStream output = new FileStream(path, FileMode.Create);
		byte[] data = new byte[1024];
		int lengthEachRead;
		while ((lengthEachRead = input.Read(data, 0, data.Length)) > 0)
		{
			output.Write(data, 0, lengthEachRead);
		}
		output.Flush();
		output.Close();
	}


	public Dll_and_Dlx()
	{
		try
		{
			theSession = Session.GetSession();
			theUI = UI.GetUI();
			string temp = "Dll_and_Dlxs.Resources.Dll_and_Dlx.dlx";
			ExtractFile(temp, Arong_Nx.Arong_Nx_App.GetPath("Dll_and_Dlx.dlx"));
			
			theDialog = theUI.CreateDialog(Arong_Nx.Arong_Nx_App.GetPath("Dll_and_Dlx.dlx"));
			theDialog.AddApplyHandler(new NXOpen.BlockStyler.BlockDialog.Apply(apply_cb));
			theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
			theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
			theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
			theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));
		}
		catch (Exception ex)
		{
			//---- Enter your exception handling code here -----
			throw ex;
		}
	}
	//------------------------------- DIALOG LAUNCHING ---------------------------------
	//
	//    Before invoking this application one needs to open any part/empty part in NX
	//    because of the behavior of the blocks.
	//
	//    Make sure the dlx file is in one of the following locations:
	//        1.) From where NX session is launched
	//        2.) $UGII_USER_DIR/application
	//        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
	//            recommended. This variable is set to a full directory path to a file 
	//            containing a list of root directories for all custom applications.
	//            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_ROOT_DIR\menus\custom_dirs.dat
	//
	//    You can create the dialog using one of the following way:
	//
	//    1. Journal Replay
	//
	//        1) Replay this file through Tool->Journal->Play Menu.
	//
	//    2. USER EXIT
	//
	//        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
	//        2) Invoke the Shared Library through File->Execute->NX Open menu.
	//
	//------------------------------------------------------------------------------
	public static void Main()
	{
		Dll_and_Dlx theDll_and_Dlx = null;
		try
		{
			theDll_and_Dlx = new Dll_and_Dlx();
			// The following method shows the dialog immediately
			theDll_and_Dlx.Show();
		}
		catch (Exception ex)
		{
			//---- Enter your exception handling code here -----
			theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
		}
		finally
		{
			if (theDll_and_Dlx != null)
				theDll_and_Dlx.Dispose();
			theDll_and_Dlx = null;
		}
	}
	//------------------------------------------------------------------------------
	// This method specifies how a shared image is unloaded from memory
	// within NX. This method gives you the capability to unload an
	// internal NX Open application or user  exit from NX. Specify any
	// one of the three constants as a return value to determine the type
	// of unload to perform:
	//
	//
	//    Immediately : unload the library as soon as the automation program has completed
	//    Explicitly  : unload the library from the "Unload Shared Image" dialog
	//    AtTermination : unload the library when the NX session terminates
	//
	//
	// NOTE:  A program which associates NX Open applications with the menubar
	// MUST NOT use this option since it will UNLOAD your NX Open application image
	// from the menubar.
	//------------------------------------------------------------------------------
	public static int GetUnloadOption(string arg)
	{
		//return System.Convert.ToInt32(Session.LibraryUnloadOption.Explicitly);
		return System.Convert.ToInt32(Session.LibraryUnloadOption.Immediately);
		// return System.Convert.ToInt32(Session.LibraryUnloadOption.AtTermination);
	}

	//------------------------------------------------------------------------------
	// Following method cleanup any housekeeping chores that may be needed.
	// This method is automatically called by NX.
	//------------------------------------------------------------------------------
	public static void UnloadLibrary(string arg)
	{
		try
		{
			File.Delete(Arong_Nx.Arong_Nx_App.GetPath("Dll_and_Dlx.dlx"));
		}
		catch (Exception ex)
		{
			//---- Enter your exception handling code here -----
			theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
		}
	}

	//------------------------------------------------------------------------------
	//This method shows the dialog on the screen
	//------------------------------------------------------------------------------
	public NXOpen.UIStyler.DialogResponse Show()
	{
		try
		{
			theDialog.Show();
		}
		catch (Exception ex)
		{
			//---- Enter your exception handling code here -----
			theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
		}
		return 0;
	}

	//------------------------------------------------------------------------------
	//Method Name: Dispose
	//------------------------------------------------------------------------------
	public void Dispose()
	{
		if (theDialog != null)
		{
			theDialog.Dispose();
			theDialog = null;
		}
	}

	//------------------------------------------------------------------------------
	//---------------------Block UI Styler Callback Functions--------------------------
	//------------------------------------------------------------------------------

	//------------------------------------------------------------------------------
	//Callback Name: initialize_cb
	//------------------------------------------------------------------------------
	public void initialize_cb()
	{
		try
		{
			group0 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group0");
			button0 = (NXOpen.BlockStyler.Button)theDialog.TopBlock.FindBlock("button0");
			button01 = (NXOpen.BlockStyler.Button)theDialog.TopBlock.FindBlock("button01");
			button02 = (NXOpen.BlockStyler.Button)theDialog.TopBlock.FindBlock("button02");
		}
		catch (Exception ex)
		{
			//---- Enter your exception handling code here -----
			theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
		}
	}

	//------------------------------------------------------------------------------
	//Callback Name: dialogShown_cb
	//This callback is executed just before the dialog launch. Thus any value set 
	//here will take precedence and dialog will be launched showing that value. 
	//------------------------------------------------------------------------------
	public void dialogShown_cb()
	{
		try
		{
			//---- Enter your callback code here -----
		}
		catch (Exception ex)
		{
			//---- Enter your exception handling code here -----
			theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
		}
	}

	//------------------------------------------------------------------------------
	//Callback Name: apply_cb
	//------------------------------------------------------------------------------
	public int apply_cb()
	{
		int errorCode = 0;
		try
		{
			//---- Enter your callback code here -----
		}
		catch (Exception ex)
		{
			//---- Enter your exception handling code here -----
			errorCode = 1;
			theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
		}
		return errorCode;
	}

	//------------------------------------------------------------------------------
	//Callback Name: update_cb
	//------------------------------------------------------------------------------
	public int update_cb(NXOpen.BlockStyler.UIBlock block)
	{
		try
		{
			if (block == button0)
			{
				MessageBox.Show("111");
			}
			else if (block == button01)
			{
				MessageBox.Show("222");
			}
			else if (block == button02)
			{
				MessageBox.Show("333");
			}
		}
		catch (Exception ex)
		{
			//---- Enter your exception handling code here -----
			theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
		}
		return 0;
	}

	//------------------------------------------------------------------------------
	//Callback Name: ok_cb
	//------------------------------------------------------------------------------
	public int ok_cb()
	{
		int errorCode = 0;
		try
		{
			errorCode = apply_cb();
			//---- Enter your callback code here -----
		}
		catch (Exception ex)
		{
			//---- Enter your exception handling code here -----
			errorCode = 1;
			theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
		}
		return errorCode;
	}

	//------------------------------------------------------------------------------
	//Function Name: GetBlockProperties
	//Returns the propertylist of the specified BlockID
	//------------------------------------------------------------------------------
	public PropertyList GetBlockProperties(string blockID)
	{
		PropertyList plist = null;
		try
		{
			plist = theDialog.GetBlockProperties(blockID);
		}
		catch (Exception ex)
		{
			//---- Enter your exception handling code here -----
			theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
		}
		return plist;
	}

}
